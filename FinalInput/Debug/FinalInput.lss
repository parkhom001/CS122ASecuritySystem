
FinalInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002b4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800104  00800104  0000034c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc2  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b9  00000000  00000000  00001226  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ac  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028a  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002d7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c0       	rjmp	.+250    	; 0x130 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a7 d0       	rcall	.+334    	; 0x212 <main>
  c4:	f5 c0       	rjmp	.+490    	; 0x2b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	81 f0       	breq	.+32     	; 0xec <initUSART+0x24>
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 61       	ori	r24, 0x18	; 24
  d4:	80 83       	st	Z, r24
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  ea:	08 95       	ret
  ec:	e9 ec       	ldi	r30, 0xC9	; 201
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 61       	ori	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
  f6:	ea ec       	ldi	r30, 0xCA	; 202
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	86 60       	ori	r24, 0x06	; 6
  fe:	80 83       	st	Z, r24
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 106:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 10a:	08 95       	ret

0000010c <USART_Send>:
 10c:	61 30       	cpi	r22, 0x01	; 1
 10e:	41 f0       	breq	.+16     	; 0x120 <USART_Send+0x14>
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	95 ff       	sbrs	r25, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_Send+0x8>
 11a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11e:	08 95       	ret
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_Send+0x18>
 12a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 12e:	08 95       	ret

00000130 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 142:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 146:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 14a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 14e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	a1 09       	sbc	r26, r1
 156:	b1 09       	sbc	r27, r1
 158:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 15c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 160:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 164:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 168:	89 2b       	or	r24, r25
 16a:	8a 2b       	or	r24, r26
 16c:	8b 2b       	or	r24, r27
 16e:	99 f4       	brne	.+38     	; 0x196 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 17e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 182:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 186:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 18a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 18e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 192:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <motionSensorfunc>:
unsigned char correctPin;

enum motionstate {motionInit, motionOn} motionState;
void motionSensorfunc()
{
	motionSensor = (PINA & 0x01);
 1a8:	80 b1       	in	r24, 0x00	; 0
 1aa:	81 70       	andi	r24, 0x01	; 1
 1ac:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <motionSensor>
	
	switch(motionState)
 1b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motionState>
 1b4:	81 11       	cpse	r24, r1
 1b6:	11 c0       	rjmp	.+34     	; 0x1da <motionSensorfunc+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	87 ea       	ldi	r24, 0xA7	; 167
 1ba:	91 e6       	ldi	r25, 0x61	; 97
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <motionSensorfunc+0x14>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <motionSensorfunc+0x1a>
 1c2:	00 00       	nop
	{
		case motionInit:
		_delay_ms(100);
		if (!motionSensor) // at 0x00, sensor is triggered
 1c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <motionSensor>
 1c8:	81 11       	cpse	r24, r1
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <motionSensorfunc+0x2c>
			motionSensor = motionOn;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <motionSensor>
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <motionSensorfunc+0x32>
		else
			motionState = motionInit;
 1d4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <motionState>
 1d8:	08 95       	ret
		break;
		case motionOn:
		break;
		default: break;
	}
	switch (motionState)
 1da:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motionState>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <motionSensorfunc+0x40>
	{
		case motionInit:
//		motionOutput = 0x02;
		break;
		case motionOn:
		motionOutput = 0x02;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <motionOutput>
 1e8:	08 95       	ret

000001ea <sensorFunc>:
}

enum sensorstate {beamInit, beamActive} sensorState;
void sensorFunc()
{
	beamSensor = (PINA & 0x02);
 1ea:	80 b1       	in	r24, 0x00	; 0
 1ec:	82 70       	andi	r24, 0x02	; 2
 1ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <beamSensor>
	
	switch(sensorState)
 1f2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <sensorState>
 1f6:	91 11       	cpse	r25, r1
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <sensorFunc+0x1c>
	{
		case beamInit:
		if (beamSensor == 0x00)
 1fa:	81 11       	cpse	r24, r1
 1fc:	09 c0       	rjmp	.+18     	; 0x210 <sensorFunc+0x26>
			sensorState = beamActive;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <sensorState>
 204:	02 c0       	rjmp	.+4      	; 0x20a <sensorFunc+0x20>
			sensorState = beamInit;
		break;
		case beamActive:
		break;
	}	//transition state
	switch(sensorState)
 206:	91 30       	cpi	r25, 0x01	; 1
 208:	19 f4       	brne	.+6      	; 0x210 <sensorFunc+0x26>
		case beamInit:
//		beamSensor = 0x00;
//		beamOutput = 0x00;
		break;
		case beamActive:
		beamOutput = 0x01;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <beamOutput>
 210:	08 95       	ret

00000212 <main>:
	}
}

int main(void)
{
	initUSART(0);	
 212:	80 e0       	ldi	r24, 0x00	; 0
	initUSART(1);
 214:	59 df       	rcall	.-334    	; 0xc8 <initUSART>
 216:	81 e0       	ldi	r24, 0x01	; 1
	
	motionSensor = 0;
 218:	57 df       	rcall	.-338    	; 0xc8 <initUSART>
 21a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <motionSensor>
	beamSensor = 0;
 21e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <beamSensor>
	myData = 0;
 222:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <myData>
	pinEntered = 0;
 226:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <pinEntered>
	unsigned int globalPeriod = 50;
	int count = 0;
	//inputs
	DDRA = 0x00; PORTA = 0xFF;
 22a:	11 b8       	out	0x01, r1	; 1
 22c:	8f ef       	ldi	r24, 0xFF	; 255
	DDRC = 0x00; PORTC = 0xFF;
 22e:	82 b9       	out	0x02, r24	; 2
 230:	17 b8       	out	0x07, r1	; 7
	//keypad
//	DDRB = 0xF0; PORTB = 0x0F;
	
//	TimerSet(globalPeriod);
//	TimerOn();
	sensorState = beamInit;
 232:	88 b9       	out	0x08, r24	; 8
 234:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <sensorState>
	motionState = motionInit;
 238:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <motionState>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 23c:	c0 ec       	ldi	r28, 0xC0	; 192
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	08 ec       	ldi	r16, 0xC8	; 200
 242:	10 e0       	ldi	r17, 0x00	; 0
//		pinEntered = 0x01;
//		correctPin = 0x01;
		// for output atmega, defaults to pinentered not correct.
		while(1)
		{
			if (USART_IsSendReady(0))
 244:	88 81       	ld	r24, Y
 246:	85 ff       	sbrs	r24, 5
			{	
		
				btn = (PINC & 0x01);
 248:	27 c0       	rjmp	.+78     	; 0x298 <main+0x86>
 24a:	86 b1       	in	r24, 0x06	; 6
 24c:	81 70       	andi	r24, 0x01	; 1
 24e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <btn>
				if (!btn)
				{
					USART_Send(0x04,0);
 252:	81 11       	cpse	r24, r1
 254:	13 c0       	rjmp	.+38     	; 0x27c <main+0x6a>
 256:	60 e0       	ldi	r22, 0x00	; 0
					motionOutput = 0;
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	58 df       	rcall	.-336    	; 0x10c <USART_Send>
					motionSensor = 0;
 25c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <motionOutput>
					beamOutput = 0;
 260:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <motionSensor>
					beamSensor = 0;
 264:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <beamOutput>
					sensorState = beamInit;
 268:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <beamSensor>
					motionState = motionInit;
 26c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <sensorState>
					btn = 0x00;
					myData = 0x00;
 270:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <motionState>
				}
				motionSensorfunc();
 274:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <btn>
				sensorFunc();
 278:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <myData>
		//		motionOutput = 0x02;
				myData = motionOutput + beamOutput;
 27c:	95 df       	rcall	.-214    	; 0x1a8 <motionSensorfunc>
 27e:	b5 df       	rcall	.-150    	; 0x1ea <sensorFunc>
 280:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <motionOutput>
 284:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <beamOutput>
	
				if (myData != 0x00) 
 288:	89 0f       	add	r24, r25
					{
					USART_Send(myData,0);	
 28a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <myData>
 28e:	88 23       	and	r24, r24
 290:	c9 f2       	breq	.-78     	; 0x244 <main+0x32>
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	3b df       	rcall	.-394    	; 0x10c <USART_Send>
					}
			break;
			}
			if (USART_IsSendReady(1))
 296:	d6 cf       	rjmp	.-84     	; 0x244 <main+0x32>
			{
				if (myData)
 298:	f8 01       	movw	r30, r16
 29a:	80 81       	ld	r24, Z
 29c:	85 ff       	sbrs	r24, 5
				{
					USART_Send(0x01,1);
 29e:	d2 cf       	rjmp	.-92     	; 0x244 <main+0x32>
 2a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <myData>
 2a4:	88 23       	and	r24, r24
 2a6:	71 f2       	breq	.-100    	; 0x244 <main+0x32>
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	2f df       	rcall	.-418    	; 0x10c <USART_Send>
 2ae:	ca cf       	rjmp	.-108    	; 0x244 <main+0x32>

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
